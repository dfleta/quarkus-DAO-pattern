

Home of Quarkus Cheat-Sheet

https://lordofthejars.github.io/quarkus-cheat-sheet/#quarkuscheatsheet


Guías:

https://quarkus.io/guides/


Quarkus - Writing JSON REST Services

https://quarkus.io/guides/rest-json


resteasy docs:

https://docs.jboss.org/resteasy/docs/4.6.0.Final/userguide/html/

https://docs.jboss.org/resteasy/docs/4.6.0.Final/userguide/html/Using_Path.html


------------------

JSONB

http://json-b.net/docs/user-guide.html#installation


-----------------

Validar parametros /beans:

Hibernate Validator 7.0.1.Final - Jakarta Bean Validation Reference Implementation: Reference Guide

https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#section-builtin-constraints

$ ./mvnw quarkus:list-extensions
$ ./mvnw quarkus:add-extension -Dextensions="quarkus-hibernate-validator"

$ curl -d '{"description":"Brings a Gorilla too"}' -H "Content-Type: application/json" -X POST http://localhost:8080/fruits -v

-v para salida verbose

-----------------

añadir quitar extensiones:

$ ./mvnw quarkus:list-extensions
$ ./mvnw quarkus:add-extension -Dextensions="quarkus-hibernate-validator"

$ ./mvnw quarkus:remove-extension -Dextension="quarkus-resteasy-jsonb"

----------------

meter este frontend HTML en

https://github.com/quarkusio/quarkus-quickstarts/blob/main/rest-json-quickstart/src/main/resources/META-INF/resources/fruits.html

Es necesario modificar los endpoints a los que he escrito yo

----------------

CURL

https://gist.github.com/subfuzion/08c5d85437d5d4f00e58

HTTP response status codes

https://developer.mozilla.org/en-US/docs/Web/HTTP/Status#server_error_responses


-----------

Testing

https://quarkus.io/guides/getting-started-testing#tests-and-transactions

Maven running a single test:

http://maven.apache.org/plugins-archives/maven-surefire-plugin-2.12.4/examples/single-test.html

$ mvn -Dtest=FruitResourceTest test
$ ./mvnw -Dtest=RepoFruitTest test

Rest-assured

https://rest-assured.io/

Validating JSON examples:

https://www.hascode.com/2011/10/testing-restful-web-services-made-easy-using-the-rest-assured-framework/

Aquí unos vídeos sobre rest-assured:

https://testautomationu.applitools.com/automating-your-api-tests-with-rest-assured/

----------

CDI

https://quarkus.io/guides/cdi-reference


-----------------

BBDD

Bajarse imagen mariadb y crear contenedor (no pasar rm y reutilizar)

$ docker pull mariadb

environment variables:

$ docker run -it --name maria -e MYSQL_ROOT_PASSWORD=developer -e MYSQL_USR=developer -e MYSQL_PASSWORD=developer -e MYSQL_DATABASE=fruit -p 3306:3306 -d mariadb:latest 


Installing and Using MariaDB via Docker

https://mariadb.com/kb/en/installing-and-using-mariadb-via-docker/


Consola admin: Beekeeper studio: An open source SQL editor and database management app

Instalado desde software de ubuntu

Conectarse como user root 



Instalar en el proyecto la dependencia quarkus-jdbc-mariadb, jsonb y hiberate-orm

$ ./mvnw quarkus:list-extensions

$ ./mvnw quarkus:add-extension -Dextensions="quarkus-jdbc-mariadb"

$ ./mvnw quarkus:add-extension -Dextensions="quarkus-hibernate-orm-panache"
[INFO] Scanning for projects...


en al application.properties: configurac bbdd del contenedor

  y el update en la hib-orm.database.generation

usar la configuracion de agroal porque la que da en el curso está deprecated

https://quarkus.io/guides/datasource

$ ./mvnw quarkus:add-extension -Dextensions="agroal"

quarkus.datasource.db-kind=mariadb
quarkus.datasource.username = root
quarkus.datasource.password = developer
quarkus.datasource.jdbc.url = jdbc:mariadb://localhost:3306/fruit
# quarkus.datasource.driver=org.mariadb.jdbc.Driver

# drop and create the database at startup (use `update` to only update the schema)
# quarkus.hibernate-orm.database.generation = drop-and-create
quarkus.hibernate-orm.database.generation = update



2. JPA

id

column


3. Panache

dependencia q- hib-orm-panache

developer extiende panache entity

implemtar prop basicas y C y R

Queries con panache:

seguir con findAll()

findbyname()

find().count()

findbynameage() => {name} {age} en el endpoitn


Active record pattern == Entity Pattern => Person extends Panache Entity

https://martinfowler.com/eaaCatalog/activeRecord.html

La entidad tiene todo el código para "administrarse" respecto a la bbdd
	person.findall()

Repository pattern == DAO parttern => PersonRepository implements PanacheRepository<Person>

	en el controlador se inyecta el DAO (el repo) 
		personRepo.findAll()


------------

TEST CONTAINERS

<dependency>
	<groupId>org.testcontainers</groupId>
	<artifactId>mariadb</artifactId>
	<version>${testcontainers.version}</version>
	<scope>test</scope>
</dependency>
<dependency>
	<groupId>io.quarkus</groupId>
	<artifactId>quarkus-jdbc-mariadb</artifactId>
</dependency>

Configurar el contenedor:

https://www.testcontainers.org/features/configuration/

Para inicializar la base de datos, necesitamos FLYWAY

FLYWAY

https://quarkus.io/guides/flyway

Instalar la extenxión (y el conector jdbc a la bbdd correspondiente)

$ ./mvnw quarkus:add-extension -Dextensions="quarkus-flyway"

En application.properties:

# Flyway minimal config properties
quarkus.flyway.migrate-at-start=true

DROP TABLE fruit IF EXISTS;
CREATE TABLE fruit 
(
    id bigint generated by default as identity, 
    name varchar(255) not null, 
    description varchar(255), 
    primary key (id)
);
INSERT INTO fruit (id, name, description) VALUES ('1', 'Apple', 'Winter fruit');
INSERT INTO fruit (id, name, description) VALUES ('2', 'Pineapple', 'Tropical fruit');